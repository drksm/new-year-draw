# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log debug;  # 增加调试日志级别
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 添加详细的调试日志格式
    log_format debug '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time" '
                    'Authorization="$http_authorization" '
                    'Content-Type="$http_content_type" '
                    'Accept="$http_accept"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        server_name  39.106.153.222;

        # 开启目录索引
        autoindex on;
        
        # 静态文件目录
        root   /dist;
        index  index.html;

        # 设置文件类型
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # API 代理配置
        location /api/ {
            # 允许跨域预检请求
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # 允许跨域访问
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # 代理设置
            proxy_pass https://www.klabers.cn;
            proxy_set_header Host www.klabers.cn;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Origin "https://www.klabers.cn";

            # 保持原始的请求方法和头信息
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Accept "application/json";
            proxy_set_header Content-Type "application/json";
            proxy_pass_request_headers on;
            proxy_pass_request_body on;

            # 启用 WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # 增加超时时间
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # SSL 配置
            proxy_ssl_server_name on;
            proxy_ssl_verify off;

            # 开启错误拦截
            proxy_intercept_errors on;
            error_page 301 302 307 = @handle_redirect;
            error_page 400 401 403 404 500 502 503 504 = @error_json;

            # 调试日志
            access_log /var/log/nginx/api_access.log debug;
            error_log /var/log/nginx/api_error.log debug;
        }

        # 处理 API 错误，返回 JSON 格式
        location @error_json {
            internal;  # 只允许内部重定向
            default_type application/json;
            add_header Content-Type application/json always;
            return 500 '{"code": -1, "message": "服务器错误", "path": "$request_uri"}';
        }

        # 处理重定向
        location @handle_redirect {
            set $saved_redirect_location '$upstream_http_location';
            proxy_pass $saved_redirect_location;
        }

        # 处理静态资源
        location /assets/ {
            try_files $uri $uri/ =404;
        }

        location /audio/ {
            try_files $uri $uri/ =404;
        }

        location /img/ {
            try_files $uri $uri/ =404;
        }

        # 处理前端路由
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control no-cache;
        }

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /index.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
} 